-- MySQL dump 10.13  Distrib 5.1.63, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: pycademy
-- ------------------------------------------------------
-- Server version	5.1.63-0+squeeze1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `tutorials`
--

DROP TABLE IF EXISTS `tutorials`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tutorials` (
  `id` varchar(200) COLLATE latin1_general_ci NOT NULL COMMENT 'Identifyer',
  `diffculty` int(5) NOT NULL COMMENT 'Diffculty of the topic',
  `order` int(10) NOT NULL COMMENT 'Position in class',
  `class` varchar(500) COLLATE latin1_general_ci NOT NULL COMMENT 'Title of the class',
  `topic` varchar(500) COLLATE latin1_general_ci NOT NULL COMMENT 'Title of the topic',
  `tutorialtext` varchar(20000) COLLATE latin1_general_ci NOT NULL COMMENT 'The tutorial text',
  `toadvance` varchar(10000) COLLATE latin1_general_ci NOT NULL COMMENT 'Condiditons that have to be met to move slide',
  `isadvanced` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'Whether a tutorial is advanced or not',
  PRIMARY KEY (`topic`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1 COLLATE=latin1_general_ci COMMENT='Stores the tutorials';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tutorials`
--

LOCK TABLES `tutorials` WRITE;
/*!40000 ALTER TABLE `tutorials` DISABLE KEYS */;
INSERT INTO `tutorials` VALUES ('introtopython',1,1,'Intro To Python','Hello World','Python is a fairly new language and it has quickly become popular because of its flexibility and ease of use. Python is what programmers call a fourth generation high level language which means it is closer to human language, so it is easier to read and understand which makes it a good place to start when it comes to learning to programming. Since it is a high level language it uses what is called an interpreter which takes the Python code and converts it into something the machine can read as opposed to other languages like C or Java that compile their code. You don\'t really need to worry about this as it doesn\'t affect how you program but is probably something you should keep in the back of your mind. For those who are wondering Where does the name come from, is it related to Monty Python? the answer is yes! the author of the language was trying to think of a name for his new creation when Monty Python started playing on the TV and from that moment on the language was known as Python.\r\n\r\nMy philosophy is learn by doing - there is no better way to learn. We are going to jump into Python with the classic \'Hello World\' program.\r\n\r\n//<NEWSLIDE>//\r\n\r\nJust type the following into the Python Interpreter\r\n\r\n//CODE//\r\nprint(\"Hello World\")\r\n//CODE//\r\n\r\n and click RUN!, we will go over what this means later. You should see the text \'Hello World\' in the output field.\r\n\r\n//<NEWSLIDE>//\r\n \r\nThere isn\'t really that much to that program, and that is the simplicity of Python. With another language like C or Java for example it would take at least 4 lines of code just to do the same thing, this is the beauty of Python. What that single line of code is doing is it is telling the computer to display \"Hello World\" to the default output device, nowadays this is your screen but it used to be a printer back in the old days.\r\n\r\nCongratulations!! You have finished your first Python program. Continue on to the next tutorial.\r\n','NA,Hello World\\n',0),('commenting',1,1,'Commenting','Commenting','This is short but important! How to comment properly is something you all need to know, because it allows you to see what your code is actually doing. This may sound silly at first but when you have been doing something else and you come back to a program it can be hard to figure out what is happening and where.\r\n\r\nTo comment you just place a hash symbol ( # ) in front of the line, and then anything you type on that line will not be executed. Using this you can also comment out code so rather than having to delete it and put it back in later you can just keep it there and it won\'t be executed.\r\n\r\nSo thank you for your time here, commenting may seem like a silly class but believe me if you use it you won\'t regret it.\r\n','NA',0),('variablesanddatatypes',1,1,'Variables And Data Types','Declaring Variables - Numbers','Variables are probably one of the most important concepts in programming. They allow you to store data so you can use it later. There are different types of data you can use variables to store, they are...\r\n\r\nINT - An integer value negative or positive e.g. 1 or -5\r\nTo declare an integer value its just as simple as my_variable = number\r\nFloat - A floating point variable is something that has a decimal can also be negative or positive e.g. 0.2 or -1.3\r\nTo declare a floating point variable you would do my_variable = number but of course rather than the number being 9 or 4 for example it would be 6.7 or 3.5\r\nDouble - Is exactly the same as a floating point variable but it has more precision\r\nA double is the same as a float when you assign it just you can add more decimal places \r\nBoolean - A boolean value can only two possible values, True or False you can think of this in terms of binary it is either on or off\r\nA boolean can be declared by either assigning a variable a value of either True or False or you can assign it by making it equal to a condition for example my_variable = True or my_variable = 5 > 3, which will assign True because 5 is greater than 3\r\n\r\nIn lower level languages like Java once you define a variable as being of an integer type you can not change this and you can\'t assign it, let\'s say, a floating point value, as it will give you an error. This is not the case in Python. Variables are dynamically typed, and you can change their type whenever you want just by assigning the variable a different type of data. You should note that these aren\'t the only types of variables you can have, but we will cover the others later.\r\n\r\n//<NEWSLIDE>//\r\n\r\nIn the python interpreter assign the variable \"my_variable\" a value from each of the variable types above, and print the variable \"my_variable\" each time you have assigned, do it in the order, INT,Float,Double,Bool. There is an example below\r\n\r\n//CODE//\r\nmy_variable=5\r\nprint(my_variable)\r\n... repeat /for different data types\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\n\r\nCongratulations you are taking your first steps as a python programmer, please continue on to the next section of this class.\r\n','NA,*',0),('variablesanddatatypes',1,2,'Variables And Data Types','Declaring Variables - Strings','This section is the same as the previous just instead of being about number variables it is about string variables. Strings contain text, its as simple as that. Though this text can be formatted, for example if you put a \"\\n\" inside a string it will cause anything following it to be on a new line below. This only really affects anything when you are printing the string so it can get a bit confusing but it does make it a lot easier in the end. Other formatting can include things like \\t which inserts a tab or a \\s which inserts a space, obviously some are more useful than others, see the examples below.\r\n\r\n\r\nString             Print Result\r\nHello\\\\nWorld       Hello\r\n                   World\r\nHello\\\\tWorld\r\n                   Hello          World\r\nHello\\\\sWorld\r\n                   Hello World\r\n\r\n\r\nIn other languages like Java or C there is a data type called a char. A char variable represents only a single character, in python this data type does not exist the only thing you can use to represent a single character is a string. To declare a string you use the following syntax my_variable = \"STRING\", you can either use double quotes ( \" ) or you can use single quotes ( \' ) surrounding the text to declare a string it makes no difference.\r\n\r\nIf you want to have a quote inside a string you just place a forward slash in front of it, for example \" This is a quote \\\" \" and the same goes for if you want a forward slash in your string you just have to put an extra forward slash in front of it e.g. \r\n\r\n//CODE//\r\n\" This is a quote \\\\\\\" and this is a backslash \\\\\\\\\\\"\r\n//CODE//\r\n\r\ntry printing this string out in the interpreter see what you get...\r\n\r\n//<NEWSLIDE>//\r\n\r\nThere are other formatting operations you can apply to a string but these are applied a bit differently. You can convert a string to all caps and all lowercase, for example string.lower() converts an entire string to lowercase strings, string.upper() converts the entire string to uppercase.\r\n\r\nSome things that will prove to be useful later on when you are learning more advanced concepts and making more advanced programs are string functions like string.split(subphrase). This will make more sense when you complete the data structures section but anyhow this function takes the string and breaks it apart at every occurrence of the <subphrase>, it then returns them as a list. so for example if you had the string \"Hello World\" and split it at the subphrase \" \" ( a space ) it would return [\"Hello\", \"World\"].\r\n\r\nThe last two functions we will look at are the find function and the replace function, string.find(<substring>) this will return the location of the first character of first occurrence of the substring. If you wish you can add in two additional parameters, the start and the end so you can choose to for example only search the middle of the string. To do this the syntax would look like string.find(substring, start, end), this function returns -1 if nothing is found.\r\n\r\nThe replace function is pretty self explanatory it takes two strings, one that contains what you want to replace and one that contains what you are replacing it with. The basic syntax for the function is as follows string.replace(old, new), this replaces the first occurrence of whatever old is with new, if you want to replace more than one occurrence you can add an additional count variable to the function e.g. string.replace(old, new, count), this means it replaces count occurrences of old with new.\r\n\r\n//<NEWSLIDE>//\r\n\r\nWe have covered quite a lot in this section and there is still alot more on strings to cover but please play around in the intepreter with what we have covered today, if you wish to look at more visit this link http://docs.python.org/2/library/string.html#module-string. Please continue on to the next section.\r\n','This is a quote \\\" and this is a backslash \\\\\\n,NA',0),('variablesanddatatypes',1,3,'Variables And Data Types','Using Variables','After learning about what different types of data you can store using a variable lets put it to use. You need to know after all how to use variables of different data types and how and when to use them for. Lets say you divide 4 by 2 you would get the integer number 2, however if you divide 4.0 by 2 you will get the floating point number 2.0. Now because of the way python works if you divide 5 by 4 you also get a integer this is because  python cuts off everything to the right of the decimal place and just leaves what is before the decimal point because both 5 and 4 are integer values. To get the division to result in a floating point value you need to have one of the values as a floating point e.g. 5.0 divided by 4, this will give you a value of 1.25 which is floating point value, if you divide 5.0 by 4.0 you get a double precision value type. But enough talking lets put this to the test...\r\n\r\n//<NEWSECTION>//\r\n\r\nStart testing what I claimed previously, don\'t just take my word for it try it out, print out the result of the following divisions make sure you print them out in the order they are in the list... there is an example below\r\n\r\n//CODE//\r\nprint(4/2)\r\n... < /print next division >\r\n//CODE//\r\n\r\n4 by 2\r\n5 by 4\r\n5.0 by 4\r\n5.0 by 4.0\r\n\r\nOnce you have typed all this in click the RUN! button and see what is printed out in the console screen.\r\n\r\n//<NEWSECTION>//\r\n\r\nCongratulations you have successfully completed your first integer and non integer division!! ','NA,2\\n1\\n1.25\\n1.25\\n',0),('variablesanddatatypes',1,4,'Variables And Data Types','Operators','Operators are important when it comes to manipulating variables most of which you will know from things you have covered at school but there are one or two that you don\'t and it\'s important that you do. Below I have listed the operators that everyone should know, see if you can apply each of the operators to the values 4 and 2, print each result. Do it in the same order the list is in.\r\n\r\nAddition (+)\r\nSubtraction (-)\r\nMultiplication (*)\r\nDivision (/)\r\n\r\nUSEFUL TIP: You don\'t have to assign a mathematical expression to a variable to print it, you can just directly print the expression e.g. print(expression)\r\n\r\nHINT\r\n\r\nuse this code template: \r\n\r\n//CODE//\r\nprint(4 operator 2)\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\n\r\nGreat! Now that we have covered the basic operators its time to try our hand at an operator you probably haven\'t heard of. This operator is the modulus operator, its symbol is %. When you mod a number by another you get the remainder left over from dividing the two numbers, the modulus function is used with integer values and while it works with decimal values it doesn\'t do what it is supposed to do. Useful applications of this is determining if a number even or odd, if a number mod 2 is equal to 0 then it is even. Write a program in the interpreter that assigns a variable based on whether a number, a,  is even, then set the number to 4.\r\n\r\nUSEFUL TIP: We haven\'t covered this yet but if you are checking if something is equal to something else you use double equals e.g. ==, the single equals is the assignment operator ( = ).\r\n\r\nHINT: Your code should look something like this \r\n\r\n//CODE//\r\nvariable = some_mathmatical_ecpression == 0\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\n\r\nNow that you can apply operators to numerical values try something else. Strings can also use operators, in a much more limited way though. For example you can do what is called string concatenation which is when you add two string together making one. You do this using the += operator, for example string_1 += string_2, string_1 will now have the contents of string_2 on the end of it. Give it a go yourself, write a program in the interpreter to join the string \"Hello\" and \"World\" together, print the variables out separately and print it out together.\r\n\r\nHINT: \r\n\r\n//CODE//\r\nvariable_a += variable_b, \"Hello\" += \"World\" = Hello World\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\n\r\nYou should note that using the += operator with number types is just a quick way of adding them for example x = x + 1 is the same as x += 1, this goes for -= as well just -= subtracts instead. Congratulations! you can now use operators in your python programs.\r\n','6\\n2\\n8\\n2\\n,True\\n,Hello\\nWorld\\nHello World\\n',0),('variablesanddatatypes',1,5,'Variables And Data Types','Constants','Constants are variables that can only be changed by changing the code and re running the program. You may be wondering what the point of this is but constant variables take up less memory and if you are writing a program that has to run on a microprocessor with limited memory. This wont be important to you at the moment but its a useful thing to remember. Python doesn\'t have constants but if you want to use one you just name the variable with all caps, there will be no coding for this lesson.\r\n','NA',0),('variablesanddatatypes',2,6,'Variables And Data Types','Project: Tip Calculator','For this project you are tasked to create a simple tip calculator, it will test your knowledge from this section of learning. You are to calculate what 15% of the variable p ( price ), set this variable to 30 ( $30 ), then print out the results. Due to the fact of rounding when you purchase something the output should be a floating point value. \r\n\r\nHINT: for those who haven\'t covered percentages in maths to get 15% of a value you multiply that value by 1 - (15/100)\r\n\r\n//<NEWSLIDE>//\r\n\r\nCongratulations! you have completed the section on variables and by completing this project shows that you can remember how to use what you have learnt.\r\n','25.5\\n',0),('ifstatments',1,1,'If Statments','Using If Statments','If statments are one of the most used things when it comes to programming. It allows programmers to compare variables, see if variables are equal, less than or greater than another variable. the syntax for an if statement is \r\n\r\n//CODE//\r\nif <condition>:\r\n	<code>\r\n//CODE//\r\n\r\nBefore we get to what the syntax means you must learn about the different operands, they are listed below. Operands are what you use to compare two variables.\r\n\r\nEqual To ( a == b ) Its important to not confuse this with the single equals wish is the assignment operator\r\nNot Equal To ( a != b )\r\nGreater Than ( a > b ) / Greater Than Or Equal To  ( a >= b )\r\nLess Than ( a < b ) / Less Than Or Equal To ( a <= b )\r\n\r\nThe code part of the if statement is the code that will be executed when the condition section evaluates to true. The condition part of the syntax can consist of any number of conditions, each condition is made up of 3 parts. The first variable, operand and second variable ( variables can be replaced with numbers of any type, e.g. int, float, double ). An example of this would be a > b, a > 5 or  5 < a. If you wanted to have multiple condition you can add an \'and\' or an \'or\' in between them, the \'and\' means that both the conditions have to be true for the <code> to be executed. For example a > b and a > 5 , if you use \'or\' that only one of them has to be true for the <code> to be executed e.g. a > b or a > 5. The indenting is important depending on what Python IDE you are using it might do it for you but without it python doesn\'t know where the code to execute begins and. Below is a complete working if statement.\r\n\r\n//CODE//\r\nif a != 5 and a != 2:\r\n	print(\'a is nether 2 or 5\')\r\n//CODE//\r\n\r\nThese same operands can be used to compare strings so for example if you wanted to see if \'hello\' was the same as \'HELLO\' you would use the code below. These won\'t be the same though because the lowercase and uppercase versions of a letter are different. The same way that 5 is not the same as \'5\' because one is the integer and the other is the string representation of that.\r\n\r\n//CODE//\r\nif \'hello\' == \'HELLO\':\r\n	print(\'hello = HELLO\')\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\nYou will notice that after i declare an if statement anything that i want to be inside it i will tab in. This isn\'t just for looks, in python white space ( spaces, tabs, newlines ) are very important. Unlike Java or C where a new line is defined with a semi colon and the bounds of if statements are defined by curly brackets in python a new line is defined by pressing the enter key, going to a new line and the bounds of an if statement are defined by where the tabbing in stops. This principle also applies to the following lessons on else statements and else if statements.\r\n\r\n//<NEWSLIDE>//\r\nIs important to remember all an if statement is doing is checking if everything inside the statement evaluates to true so for example you could have if True: and this would just always evaluate to true. If you had if True and False: this would always evaluate to false because both parts aren\'t don\'t evaluate to true. If you replaced the and with an or this statement would always evaluate to true because only one of the parts has to evaluate to true for the whole thing to evaluate to true.\r\n\r\nIn the interpreter write some code that prints out the variable a if it is not equal to 2 and less than or equal to 6. If it fits both of these conditions it should print out ‘Valid Number!’, set the variable a to the number 4 and run it.\r\n\r\nHINT\r\n\r\n//CODE//\r\nif a != 2 and <another condition>:\r\n    print(\"Valid Number!\")\r\n//CODE//\r\n\r\n\r\n//<NEWSLIDE>//\r\nOne thing that is important to remember inside an if statement the variables are separate from the variables that are defined globally e.g. in the main program. If you create a variable x inside an if statement, you won\'t be able to access that variable outside the if statement. so for example if i create a variable called x inside an if statement but tried to print it outside of the statement it would give me an error, want to see this your self. Try the following code in the interpreter.\r\n\r\n//CODE//\r\nif True:\r\n    x = 1\r\n\r\nprint(x)\r\n//CODE// \r\n\r\nIf statements in Java are relevantly similar to ones in Python the difference being that since Java is a lower level language so rather than using and\'s and or\'s you use || for or and && for and.\r\n\r\nYou can now write programs using if statements this will add a new dimension to your programming. Continue this section of lesions to find out how to make your if statements more complex.','NA,NA,Valid Number!\\n',0),('ifstatments',1,2,'If Statments','Adding else statments','Else statements are the final part of the if-statement group, you can think of an else statement as something that will be called if none of the other components evaluate to true. You can only have one else section in the if statement. The syntax is as follows.\r\n\r\n//CODE//\r\nelse:\r\n    <code>\r\n//CODE//\r\n\r\nThere is no condition part to the else statement because as i discussed before the else statement is for when all other statements do not evaluate to true. To show that you understand how all these parts of if statements fit together. Like the last tutorial write a program in the interpreter that prints out ‘Greater’ if the variable a is greater than 0 or prints out ‘Less’ if a is less than 0 except use an else statements in your program this time. Set the variable a to -10.\r\n\r\n//<NEWSLIDE>//\r\n\r\nYou have completed the entire section on if statements now all that is left is the project.','Less\\n',0),('ifstatments',1,3,'If Statments','Adding else-if statments','there are three parts to an if statement, the if part, the else-if part and the else part. In this section we are going to be working on the second part, the else-if part. The else-if part of an if statement allows you to have multiple sections in that statement, for example you can have a section for when a is equal to 4 and one where a is equal to 7. Below is the syntax for an if statement containing a else-if component...\r\n\r\n//CODE//\r\nif <condition>:\r\n	<code>\r\nelif <condition>:\r\n	<code>\r\n//CODE//\r\n\r\nyou can add as many else-if ( elif ) statements as you like, an important thing to remember it will only execute one of the components. It will sequentially go through all the components of the if statement until it reaches a condition that evaluates to true, then it will skip the rest of the ones below it. As for having multiple conditions, same rules apply to elif statements as to if statements. You can have as many and’s and or’s in these conditions as you like.\r\n\r\n//<NEWSLIDE>//\r\n\r\nTo make sure you understand what you have learned so far try completing the following simple program. In the interpreter write some code that does the following, checks to see if the variable is greater than 0 or less than 0, if it is greater than zero print ‘Greater’ if is less than 0 print ‘Less’, assign a to -4 and run the program.\r\n\r\nHINT\r\n\r\n//CODE//\r\nif a > 0\r\n	print(“Greater”)\r\nelif <condition>:\r\n	print(“Less”)\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\nYou are now one step away from fully understanding how to utilize if statements. Continue On\r\n','NA,Less\\n',0),('ifstatments',1,4,'If Statments','Project: Grade Deteminer','For this project you are tasked to create a program to help a teacher determine a grade. The grade system use to be simple you would just get a score between 0 and 100 but now they have you changed it instead you get Not Achieved, Achieved, Merit or Excellence the teacher needs help converting from the old system. You are to use your knowledge of if statements to complete this task. The grade boundaries are as follows, 24 or below is Not Achieved, 25 to 49 is Achieved, 50 to 74 is Merit and 75 to 100 is Excellence. For the variable s check to see what mark they would get in the new system and then print it out. Run this program for the value 49 ( assign a the value 49 ).\r\n\r\n//<NEWSLIDE>//\r\nYou have now completed the class on using if statements, and now you are well on your way to learning more advanced programming concepts. Please continue on to the next set of tutorials.\r\n','Achieved\\n',0),('loops',1,1,'Loops','For Loops','For loops are another concept when it comes to programming, they make it possible to make code more efficient by running a certain code block as many time as you want. The syntax for a for loop is fairly simple and is quite similar to the if statement so it shouldn\'t be too hard to remember, it is as follows. For loops can do allot of things, they can loop through elements in different data types like arrays or dictionaries, we haven\'t covered this yet. What you will learn here is how to make a loop iterate a certain number of times. The syntax for this sort of statement is below.\r\n\r\n//CODE//\r\nfor i in range(0, <end of range>):\r\n    <code>\r\n//CODE//\r\n\r\nwhat the code above means is that for each number between the range 0 and <end of range> the variable i will be assigned that value and the <code> will be executed. What you learnt in the last section about white space and scoping also applies here. Creating a variable inside a loop means that it can only be accessed inside that loop and for a line of code to be a part of a loop you must tab it in.\r\n\r\nin the interpreter write some code that will print the numbers 0 to 4 using a for loop.\r\n\r\nUSEFUL TIP: If you are using the range 0 to 5 it will stop when i is equal to 4 not 5 \r\n\r\n//<NEWSLIDE>//\r\nThe general syntax for a for loop is below, python has a much more dynamic for loop structure than Java or other languages. The for loop in java does essentially the same thing but it makes it more complicated to do certain things, at the moment it may not seem like this but you will learn why this is later on. Something that is important to remember that while python makes things easier it does have a cost, for everything that you don\'t have to do your self it  is still being done behind the scenes.\r\n\r\n//CODE//\r\nfor <variable> in <data set/range>:\r\n    <code>\r\n//CODE//\r\n\r\nSome things that are very useful with for loops are break and continue statement. A break statement exits the loop whenever it is reached so for example the code below would exit when i is the value 3, give it a go in the interpreter.\r\n\r\n//CODE//\r\nfor i in range(0, 100):\r\n	print(i)\r\n	if i == 3:\r\n		break\r\n//CODE//\r\n\r\nThe second statement that is useful is the continue statement. What this does is jump straight back to the beginning of the loop when it is executed so for example in the code below whenever its an odd number it won\'t print it out\r\n\r\n//CODE//\r\nfor i in range(0, 10):\r\n	if i % 2 != 0:\r\n		continue\r\n	print(i)\r\n//CODE//\r\n\r\nKeep these things in mind, they will be useful when using for loops in your own programs. Something that is important to know about the break statement is that in most languages like Java or C using the break command is taboo and frowned upon by programmers. But python is an exception because of its nature the break statement is an integral part of the language. I think you should know this because you shouldn\'t get too comfortable using them in languages that aren\'t python. Python is a good language but don\'t let it teach you to be lazy. Please move on to the next section','0\\n1\\n2\\n3\\n',0),('loops',1,2,'Loops','While Loops','While loops are another important programming concept to have under your belt, while you could do everything with a for loop its probably easier to use. The difference between them it that a for loop executes code a set number of times but a while loop runs until the condition evaluates. Unlike a for loop you have to update the variable controlling it manually. The syntax for a while loop  is below.\r\n\r\n//CODE//\r\nwhile <condition>:\r\n	<code>\r\n//CODE//\r\n\r\nas with other things that require conditions you can have as many conditions as you want. As i said above while the condition in the loop is true the code will be executed. This can make it tedious to do somethings with while loops which is why you have to choose carefully what type of loop to use. But enough talking lets get to using while loops.\r\n\r\n//<NEWSLIDE>//\r\nwrite a program that will print out all the numbers between ( and including ) 0 to 4 except this time use a while loop\r\n\r\nUSEFUL TIP: The condition will look a lot like the ones in if statements\r\n\r\n//<NEWSLIDE>//\r\nThe break and continue statements work the same way in while loops as they do in the for loops. You have now covered all there is to cover with the basics of loops as you continue through the remaining classes you will learn more about them in context to data structures. Continue onto the project.','NA,0\\n1\\n2\\n3\\n4\\n',0),('loops',1,3,'Loops','Project: Average Calculator','For this project you are to write a program to determine the average of a group of numbers, figure out the average of a group of numbers. Use a while or for loop to add up the numbers between 0 and 100 at 5 step intervals, if you use a for loop to get numbers at intervals you change the code to look like \r\n\r\n//CODE//\r\nfor i in range( <start number>, <end number>, <increment>):\r\n//CODE//\r\n\r\nthen divide the sum of the numbers by the number of numbers you added up then print the result out. The result should be a floating point value.\r\n\r\nHINT: Code should look like the following\r\n\r\n//CODE//\r\ns = 0.0\r\ncount = 0\r\n\r\nfor i in range(0, 100, 5):\r\n	add to the sum ( s ) /and add one to count, you can figure out the rest\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\nYou have completed the section of this course on programming loops and now are one step closer to mastering the basics of Python. Congratulations.\r\n','47.5\\n',0),('modularprogrammingstructure',1,1,'Modular Programming Structure','Functions','Functions are useful when it comes making your code more portable and easier to read a function  is a block of code you can execute by calling it. The basic framework for a function is below\r\n\r\n//CODE//\r\ndef <name>():\r\n	<code>\r\n//CODE//\r\n\r\nThis just means that if you type <name>() it will execute the code. Generally you place functions at the top of the page and then you can just put the main part of your program below it for example\r\n\r\n//CODE//\r\ndef test():\r\n	<code>\r\n\r\ntest()\r\n//CODE//\r\n\r\nThe code above would run the function test. Just in case you were wondering, yes just like if statements and loops, you have to tab in anything you want to have contained in the function. Give this a go, create a function that will print out hello world and then run it.\r\n\r\n//<NEWSLIDE>//\r\nYou can do some more advanced things with functions like passing and returning values. To pass a variable to a function you put a variable between the brackets when you create the function for example def test(<variable>), you can pass as many variables as you like. You can assign default for a passed variable which means that if when you call the function in your program and you do not pass any value the variable will get the default one. You do this quite easily by doing the following  \r\n\r\n//CODE//\r\ndef test(<variable>=<value>)\r\n//CODE//\r\n\r\nsee the example below for more details.\r\n\r\n//CODE//\r\ndef test(a = 5):\r\n	print(a)\r\n\r\ntest(3)\r\ntest()\r\n//CODE//\r\n\r\nthe above code will run the function test twice the first time it will pass it 3 which means the number 3 will be printed and the second time no variable is passed so a will assume the default value of 5 and that will be printed\r\n                                 \r\n//<NEWSLIDE>// \r\nTo return a value from a function you use return <variable>, you can return a value  at any point in a function and you can have multiple return statements in a function but the function doesn\'t have to have a return statement. Once one is executed no more code in the function will be run. See below.\r\n\r\n//CODE//\r\ndef test( a = 5 ):\r\n	if( a == 5 ):\r\n		print(‘a=5’)\r\n		return 0\r\n\r\n	print (‘a!=5’)\r\n\r\ntest()\r\n//CODE//\r\n\r\nThe code above will run the test() function and pass no value so a will get the value of 5 then it will print ‘a=5’ and return the value 0, this means it will not print ‘a!=5’ which without the return statement would be printed. the whole point of a return statement is so you can pass a value back to where you called it from, for example in the code above if you had the code result = test() result would be assigned the value 0 because the function returns 0. The other possibility if you had result = test(4) result would get the value NULL which means it has no value because nothing would get returned..\r\n\r\nNow that you have finished learning about how to use functions i encourage you to continue on to the project and put these skills to use.','Hello World\\n,NA',0),('modularprogrammingstructure',1,2,'Modular Programming Structure','Project: Simplify A Program','This project isn\'t like most of of the ones you will of completed previously in these classes, Here you will look at a simple piece of code and use functions to make it simpler. Hopefully this will show you the power of functions and how useful they can be.\r\n\r\nThe code you will be shrinking is below...\r\n\r\n//CODE//\r\na = 3\r\nb = 5\r\n\r\nfor i in range(0, a):\r\n	b += b\r\n\r\nprint(b)\r\n\r\na = 4\r\nb = 6\r\n\r\nfor i in range(0, a):\r\n	b += b\r\n\r\nprint(b)\r\n//CODE//\r\n\r\nHINT:\r\n\r\n//CODE//\r\ndef function(a, b):\r\n	for i in... \r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\nCongratulations! You have just finished the section of functions. You now know how to make your code smaller and how to optimize your code.','15\\n24\\n',0),('datastructures',1,1,'Data Structures','Tuples','Tuples are one of the most simple data structures. They are used to hold small amounts of data, this data type is similar to a data type called a structure which is available in C the difference is you have to define what type of data will be stored in each slot of the structure were as with a tuple you just assign whatever you want, so the one used in python is more dynamic but i means you have to watch your data more closely because you might forget what you have put in there and try divide a string by a number. You can use tuples to store any type of variable be that a string or a numerical value. to assign an empty tuple you use the following f = (). To add data to it you just put the data inside the bracket, if you want to have more than one piece of data separate it with commas e.g. \r\n\r\n//CODE//\r\nt = (5, 4, \"hello\") \r\n//CODE//\r\n\r\nonce you assign data to a tuple you can\'t change it you can only recreate it with the new data. Give it a go in the interpreter, create a tuple and try change the data in one of the slots, to access the data in a tuple you use tuple[<position>]. So in the tuple above to access the string “hello” you would use t[2]. You may be wondering why its not 3 for this position, this is because the indexing for any data structure like Java or C++ starts from 0.\r\n\r\nIn the interpreter to the side create a tuple containing the two strings \"Hello\" and \"Tuple\", then print it out, you can print a tuple like you would print anything.\r\n\r\n\r\n//<NEWSLIDE>//\r\nAnother way to print out a tuple is by its parts, you can access the elements of a tuple in the following way variable[<position>], the position is the location in the tuple that the data is stored. Remember the position starts at 0 and for each element after the first just add one to the position. So for example if you had a tuple that looked like this ( \"Hello\", \"World\" ) if you printed the data at position 0  \"Hello\" would be printed and if you printed the data at position 1 “World” would be printed.\r\n\r\nYou can also do what is called nesting with tuples. Nesting means you can put a turple inside a tuple for example \r\n\r\n//CODE//\r\ntuple = ( (3, 6), (5, 3) )\r\n//CODE//\r\n\r\nthis can be useful if you want to group data. You will find a use for this in the project of this class. One more important thing you should remember is that to get the length of a tuple e.g. how many elements it has, use the len() command, for example to get the length of a turple called t you would do len(t). For now just move on to the rest of this class.','(\"Hello\", \"Tuple\")',0),('datastructures',1,2,'Data Structures','Lists/Arrays','Lists are what we use in python but other languages like Java and C use arrays. They are fairly similar and they operate in similar ways they both but there are some key differences. An array once created you can\'t extend it or shrink it, it has a fixed size. A List or Linked List on the other hand can be dynamically extended as you have new requirements. Python uses something similar to a linked list which can have data added to it and removed all in one action where as with an array to extend it you have to create a new one with an extra slot and copy everything to it. which is another reason why it is more dynamic than other languages, this being said you can always create your own type of linked list in another language.\r\n\r\n//<NEWSLIDE>//\r\nLinked Lists are just a more advanced version of a turple. To create an empty list you use the following list = [], like tuples linked lists can store any type of data you want also you can mix it up so one part could be a number, another part could be a string. This is another thing that makes linked lists different from arrays, arrays are limited in the sense that they can\'t store different data types in the same structure. So for example if you make an array in Java or C it can only contain integers or only strings, while this sounds bad it can make things less confusing. also like tuples you can assign a list the same e.g. \r\n//CODE//\r\nlist = [4, 5, 6, \"hello\"]\r\n//CODE//\r\n\r\nthough if you want you can also use the list.append(<data>) function which will add the <data> to the end of the list.\r\n\r\nTo remove from a list you can use the following list.pop(<position>) this removes the data at <position>, this function also returns the data meaning if you use the following result = list.pop(<position>) it will assign the variable result the value at <position> in the list then remove it from the list.\r\n\r\nThe other significant difference between tuples and lists is that you can reassign data in an array. For example if you had the array a = [1,2,3,4,5] and you wanted to replace the one with a two rather than having to recreate the array you can just use a[0] = 2.\r\n\r\n//<NEWSLIDE>//\r\nCreate a program that starts with an empty array, then insert the numbers 1 to 10, then remove every second number and print them out\r\n\r\n//<NEWSLIDE>//\r\nNow that you understand how to use the basics of  lists in python we can cover a few of the other useful things you should know about. to get the length of a list you use the same as what you would use for a tuple. Which is the len() function, the len() function will return the number of elements in the list. Also like tuples you can nest lists e.g. list inside a list\r\n\r\n//CODE//\r\nlist = [[6, 7], [6 8]]\r\n//CODE//\r\nthese are very useful for grouping data inside an list, to access the data inside a list that is in a list is very simple consider the following, to get data from a list you do list[<position>] the deeper you want to go the more brackets you but on the end so if you have a list like the one above you would use list[<position>][<position-2>]. If you wish to sort a list you can use the sorted(<list>) function, this will return a sorted version of a list, you can\'t sort a list of arrays though only a data array for example sorted([1, 5, 7,3,6]) will change the list to [1, 3, 5, 6, 7]\r\ntry it for yourself in the interpreter to the side or continue to the next section.\r\n\r\nPlease continue on to the last remaining lesion in this class.','NA,1\\n3\\n5\\n7\\n9\\n,NA',0),('datastructures',1,3,'Data Structures','Dictionaries','Dictionaries are another one of pythons data structures. These are unique to python i the sense that other languages don\'t have them built in. Dictionaries are an indexed data type, like arrays, the difference however is how they are indexed, arrays are indexed with numbers e.g. the index of the first element is 0, the second is 1 and so on, dictionaries use keys for indexing. So for example you could store an integer value under the string \"friends\" so when ever you do dictionary[\"friends\"] it will give you access to the integer value. Also like all other data structures in python there is no set data type you have to use with it, it is up to you.\r\n\r\nTo assign an empty dictionary to a variable use the following, dictionary = {}, if you wish assign a variable a dictionary with values in it use the following \r\n\r\n//CODE//\r\ndictionary = {<key>: <data>, … }\r\n//CODE//\r\n\r\na way that i think is better is to start with an empty dictionary, d = {}, then to add to it use this, d[<key>] = <data>. This may be a little confusing seeing as with lists you had to add the data in before you could access via list[<pos>]. With dictionaries its different there is no append function. One thing you have to watch out for is d[<key>] += 1 if the key doesn\'t already exist, this will cause an error.\r\n\r\n//<NEWSLIDE>//\r\nUse your knowledge from the previous sections and this one to write a program that goes through all the numbers from 1 to 20 and test to see if there even or odd then depending on what they are add them to an array contained inside a dictionary once looped through all the numbers print out the even array followed by the odd.\r\n\r\nHINT: \r\n\r\n//CODE//\r\ndictionary = {}\r\nd[\'odd\'] = []\r\nd[\'even\'] = []\r\n\r\n</for loop conditions>\r\n	<test number and add to dictionary>\r\n\r\n<print result>\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\nSome other things that you will probably be helpful to know are how to extract the list of keys and how to extract a list of data from the dictionary. To get a list of the keys in a dictionary use the following, result = dictionary.keys(), for example if you use that function on dictionary from the exercise above you will get the following result [\'even\', \'odd\']. To get the list of data you use result = dictionary.values() and you will get [ [2, 4,6, 8, 10, 12, 14, 16, 18], [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] ]. You can try this in the interpreter to the side if you wish.\r\n\r\nCongratulations you have successfully completed the section on data structures which is probably one of the most important things you will learn as it allows you to store data in more efficient ways. ','NA,[2, 4, 6, 8, 10, 12, 14, 16, 18]\\n[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\\n',0),('datastructures',3,4,'Data Structures','Project: Address Book','For this project you are going to create an address book program that uses dictionaries and lists or tuples. You will use these data structures to store peoples phone numbers and street addresses and you will index the data with there names sort it out and print it out in order. The data to use is below\r\n\r\n\r\nBob Brown - 08675436 - 14 Yellow St\r\nJerry Jones - 05688321 - 187 Brown St\r\nWilliam Willhouse - 06387327 - 67 Crawford St\r\nKerry Karran - 02434562 - 2 Silver St\r\n\r\nAs this is a lot to do i will give you some tips, to start insert the data into the dictionary using whatever means you wish. Then get the list of keys and sort it once that is done loop through all the elements in the sorted names list and print out the data contained under that key in the dictionary. To get a list of sorted keys use sorted(<dict>), so to get a list of the keys sorted use sortedkeys = sorted(<dict>)\r\n\r\nWhen printing it out the output should follow the pattern below...\r\n\r\nName Of Contact\r\nInformation Of Contact ( in array or tuple e.g. [phone number, \"address\"] )\r\n\r\nUSEFUL TIP: To loop through a list you can use the following for s in list: , this means that for each element in the list s will be assigned that value and the code inside the for loop will be executed e.g.\r\n\r\n//CODE//\r\ns = [1,2,3]\r\n\r\nfor i in s:\r\n    print(i)\r\n//CODE//\r\n\r\nwill give you the output 1, 2 and 3 on seperate lines. Give it a go.\r\n\r\n//<NEWSLIDE>//\r\nCongratulations, you have finished on of the most key parts to learning to program, and by completing this project you have shown that you can remember how to utilize these skills.\r\n','Bob Brown\\n[08675436, \"14 Yellow St\"]\\nJerry Jones\\n[05688321, \"187 Brown St\"]\\nKerry Karran\\n[02434562, \"2 Silver St\"]\\nWilliam Willhouse\\n[06387327, \"67 Crawford St\"]\\n',0),('testinganddebugging',1,1,'Testing And Debugging','Finding And Fixing Syntactical Errors','When programming you will come across two types of errors here we will look at the first, Sytax errors. Fixing Syntax errors is usually a lot easier that fixing semantic errors ( what you are doing next ) because when you try and run your code the python interpreter will give you an error message telling you what line of code is causing the problem these error messages look like the following...\r\n\r\n//CODE//\r\nTraceback (most recent call last):\r\n  File \"<pyshell#1>\", line 1, in <module>\r\n    i[6]\r\nIndexError: list index out of range\r\n//CODE//\r\n\r\nWhat this one in particular means is that you are trying to access an element of an array that doesn\'t exist. For example if you have the following array [1,2,3,4] and you try to look at the element at index 4 you will get that error above because the indexing in this array only goes up to 3 ( 0 - 3 ).\r\n\r\n//<NEWSLIDE>//\r\nErrors that you will commonly encounter are\r\nTab Errors - You haven\'t indented your code properly, e.g. used a space instead of a tab\r\nSyntax Errors - You have mistyped a portion of your code\r\nArithmetic Errors - If your arithmetic is a problem e.g. result of an operation \r\n\r\nFor the code below see if you can figure out what the problem is, a hint is that it is to do with arithmetic errors, don\'t worry if you can\'t solve it, this section is probably one of the hardest\r\n\r\nHINT: What is the first devision going to be, 5 by ?\r\n\r\nCode :\r\n\r\n//CODE//\r\nfor i in range(0, 3):\r\n    print(5/i)\r\n//CODE//\r\n\r\nError :\r\n\r\n//CODE//\r\nTraceback (most recent call last):\r\n  File \"<pyshell#2>\", line 2, in <module>\r\n    print(5/i)\r\nZeroDivisionError: integer division or modulo by zero\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\nThe problem with the example above is that the variable i starts at 0 and goes to 2, anyone doing maths probably knows that division by the number 0 is impossible and as you can see inside the loop the program is printing out 5 / i . In the first iteration of the loop you are trying to divide 5 by 0 and this is what causes the error, to fix this you change the for loop to be range(1, 3): \r\n\r\nYou have now completed the second section of this class now try your hand at the project.\r\n','',0),('testinganddebugging',1,2,'Testing And Debugging','Finding And Fixing Semantic Errors','Semantic errors are the second and slightly harder bugs to find because they are not always that obvious. They are flaws in the logic of your program for example you might have some code that adds two variables e.g. a + b but what you really want is the two variables multiplied together e.g. a * b. This is a semantic because the code is not incorrect in the sense that it will be executed but it is incorrect in the sense that it doesn\'t do what it wants you to do.\r\n\r\nThese types of errors are probably the hardest of the two to find and fix because it may not be clear where the error is. This also is an example of how commenting is useful, it could make it easier to find the error. Consider the following code that takes two numbers and multiplies them together...\r\n\r\n//CODE//\r\ndef multiply(a,b):\r\n	total = 0\r\n	for i in range(0, a):\r\n		total += a\r\n\r\n	print(total)\r\n\r\nmultiply(3, 5)\r\n//CODE//\r\n\r\nWhat this should print out is 15 and what you actually get is 9 try it in the interpreter see if you can fix it, if you can\'t just continue on\r\n\r\n//<NEWSLIDE>//\r\n\r\nIf you managed to fix the program very good other wise it doesn\'t matter, spotting problems like this is more of an art than a skill and is very difficult. The problem was that each time the code in the loop was run it was adding the variable a to the variable total so actually you were multiplying a by itself because the loop was run a times you could either change the for loop to for i in range(0, b): or you could change what is inside the for loop to total += b. the problem with errors like this is that it can take a long time to trace them back to their origin because it can seem like they are coming from one place when really its another or its coming from multiple places. its hard to provide an example of this so just picture the example above with 10 more function that are all interlinked and each contain about 30 lines of code, it makes it very difficult to find where the error is.','',0),('testinganddebugging',1,3,'Testing And Debugging','Project: Find And Fix All The Bugs In A Program','Now you have these bug finding skills its time to put them to use, look at the code below is has a few errors, both syntactic and syntactic, see if you can find and fix them so the program outputs the correct value\r\n\r\nthe code to fix is below, if you can\'t do it try using Google, do some research.\r\n\r\n//CODE//\r\ndef processnumber(num):\r\n    a = 0\r\n    if num < 3:\r\n        return num / 3\r\n    else if num >= 3\r\n        return num * 3\r\n \r\nfor i in range(0, 10):\r\n	print(processnumber(i))\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\nCongratulations! this brings our learning to an end, now you have the necessary tools to create your own python programs. If you wish to extend your self you can continue onto the more advanced tutorials.','0.3333333333333333\\n0.6666666666666666\\n9\\n12\\n15\\n18\\n21\\n24\\n27\\n',0),('fileio',2,1,'File IO','Reading And Writing To A Text File','Writing data to a text file is a great way to store information so it can be retrieved after a program has been stopped and started again. To open a file its very simple you just use \r\n\r\n//CODE//\r\nf = open(\'<filename>\', \'<open-method>\')\r\n//CODE//\r\n\r\nthe filename is the location of where you want the text file to be so if you wanted it in the C drive you would put \'C://test.txt\', you have to include the file path in the name. The open method is what you want to do with the file for example do you want to read from it? write to it? below is a list of the common different options, there are some others but they are binary and you don\'t need to know these now.\r\n\r\nr - Read Only - Just read from the file\r\nw - Write Only - Just write to the file\r\nr+ - Read/Write - Appends to the file if it already exists, gives an error if there is no file\r\nw+ - Read/Right - If file exists it wipes it, if file doesn\'t it creates it\r\n\r\nto write to a file once it has been open you do the following f.write(\'<data>\'). See the following example \r\n\r\nNOTE: To write an int to file you must convert it to a string using str(<num>)\r\n\r\n//CODE//\r\nf = open(\'test.txt\', \'w+\')\r\nfor i in range(0, 10):\r\n	f.write(str(i))\r\n//CODE//\r\n\r\nthis will write the numbers 0 to 10, feel free to try this in the interpreter on your computer. Experiment with it, it might help you get a better understanding of what you are learning.\r\n\r\n//<NEWSLIDE>//\r\nAnother way to write data to a text file is to use the writelines function f.writelines(<list-variable>), this function rather than taking a single piece of data to add to the file it takes a list and writes all the elements in the list to the text document on separate lines. Look at the following example to see how that works.\r\n\r\n//CODE//\r\nf = open(\'test.txt\', \'w+\')\r\ndata = [0,1,2,3,4,5,6,7,8,9,10]\r\nf.writelines(data)\r\n//CODE//\r\n\r\nThis should give you the the same result as the previous example. You may be thinking that this is an easier way to do write to a file all the time but it just depends on your situation.\r\n\r\n//<NEWSLIDE>//\r\nTo read from a file we can just use the data = f.read() function this will assign the variable data all that was contained inside the text file. To see it in action try the code below in your interpreter\r\n\r\n//CODE//\r\nf = open(\'test.txt\', \'r\')\r\ndata = f.read()\r\nprint(data)\r\n//CODE//\r\n\r\nThis should print out the numbers 0 - 10 each on separate lines, cool right! now that you have finished this section continue on to how to write data sets and store them in special files so you can read them directly back in as a data set.','',1),('fileio',2,2,'File IO','Using Pickle Files','Sorting data sets in a text file is all very well but its a crude way of doing it and there are much more efficient and simple ways to do it, the way we are going to look at is called pickling. This allows you to store entire data sets in a binary file to do this we use the following code i will explain what components of it do after we have given it a go\r\n\r\n//CODE//\r\nimport pickle\r\nf = open(\'test-pickle\', \'wb\')\r\ndata = [0,1,2,3,4,5]\r\npickle.dump(data, f)\r\nf.close()\r\n//CODE//\r\n\r\nThis stores the data variable in the file test-pickle, the line import pickle imports the function that will be processing the data to be pickled this time we are using \'wb\' as the open method this stands for write binary. All this means is that the data is written as a byte stream ( 1\'s and 0\'s ), the pickle.dump(data, f) is just adding the data to the file the first variable is the data set you want to add and the second variable is the file you are adding it to. The reason why this can\'t be done like f.dump() is because the only thing different between this and writing to a text file is how the data is processed before it is added to the file, when you add text no processing is done it stays the same but to add an entire data set to a file you have to do some special things and these are done separately. Type this program into your interpreter and run it, you shouldn\'t see anything happen but i file will appear in the directory your python script was saved to. Next you will learn how to retrieve this data.\r\n\r\n//<NEWSLIDE>//\r\nto load this data back into a program after you have stopped and started it again or something similar see the code below. It is similar to the code to write to the file.\r\n\r\n//CODE//\r\nimport pickle\r\nf = open(\'test-pickle\', \'rb\')\r\ndata = pickle.load(f)\r\nprint(data)\r\n//CODE//\r\n\r\nThe import pickle line does the same as in the previous part and the f = open(\'test-pickle\', \'rb\') is very similar to the other program the difference between them is the open method, this time we used \'rb\' instead. rb stands for read binary and we use this instead because we are no longer writing to the file we are reading from it, as for the third line data = pickle.load(f) this is new, what this does is it re loads the data set from the pickled file back into the program. We can\'t just read it using the f.read() function because if we did we wouldn\'t get our original data back we would get some crazy looking string that consists of characters you probably haven\'t seen before.\r\n\r\nPlay around with this code, try open the data you saved before. Hopefully playing around with the code will help you remember how to do it. Now that you have finished this course you can continue onto the other advanced courses or put your skills to use.','',1),('objects',3,1,'Objects','Objects','Once you have learnt about objects there is no going back, they are probably one of the most useful things you will learn here. They allow programmers to make their programs much more dynamic and fluid, one way you can visualize what a function is like is to think of a car, that is the completed program. The car is made up of lots of parts like wheels, doors, some of which you need more than one of, so in terms of programming you could create a wheel object and rather than having to have tons of code for four wheels you can just create 4 wheel objects.\r\n\r\nObjects are like separate mini programs which can contain variables and functions so for a wheel variable you might have a rotate function and a variable that counts how far the wheel has been rotated there is a code example below...\r\n\r\n//CODE//\r\nclass wheel(object):\r\n    def __init__(self):\r\n        print(\'A Wheel Has Been Created\')\r\n\r\nw = wheel()\r\n//CODE//\r\n\r\nwhile this looks completely different to everything else we have learnt its fairly simple. All the class wheel(object) does is create the container for the class, all of the parts of the class will go inside this. you will notice that the function __init__ has a parameter self which it does not use, this is because every function inside an object must have the special parameter so it can refer to elements of the object, if a function inside an object doesn\'t have the self an error will occur. If you wish to pass values to an object on creation just add parameters to the __inti__ function and place them inside the brackets on the creation line e.g. w = wheel(<parameters>), as simple as that. As for the __init__ function itself this is the function that is executed when a new version of that object is created so in this case if a new wheel object is created, using <variable> = wheel() , the string ‘A Wheel Has Been Created’ will be printed. Give this program a try on your computer then continue onto the next part of this tutorial. Time to add some extra features to this program, for example being able to number the wheels would be useful. When you create a new wheel class it should print out what numbered wheel it is. Being able to rotate the wheels would also be useful, give implementing this a go, whenever you update the rotation you should print out the new angle of rotation. If you can\'t complete this just continue on, this is quite a challenge so don\'t worry if you can\'t.\r\n\r\nUSEFUL TIP: To create a variable inside an object use the self.<variable> = <value>, this means the variable can be accessed anywhere in the object if it is created in the __init__ function and to call a function inside an object you can call it by <object variable>.function() in this case w.function()\r\n\r\n//<NEWSLIDE>//\r\n\r\nThis is my implementation of what i asked you to do above. If you completed it then congratulations you probably still want to read this section to make sure you understand what it is you did if you couldn\'t complete it, its fine but you should read this bit so you can know what to do \r\n\r\n//CODE//\r\nclass wheel(object):\r\n    def __init__(self, num):\r\n        self.number = num\r\n        self.rotation = 0\r\n	print(\'A Wheel Has Been Created. Wheel number \' + num)\r\n\r\n    def rotate(self):\r\n	self.rotation += 1\r\n	print(self.rotation)\r\n\r\nw = wheel(1)\r\nw.rotate()\r\n//CODE//\r\n\r\nSo the things i have added, we have covered before just this is using those skills in a different way. Adding a function to an object is the same syntax as how you would normally add a function to a program the only difference being the self parameter, functions inside an object can have anything a normal function can, be that a return statement or something else so get creative. as for the changes to the __init__ function the num parameter does what it would in any function, this means when you create a wheel object you have to pass it a variable which will be the wheel number. as i discussed above for a variable to be accessed from anywhere inside the function you have to add self. before the variable name e.g. self.variable. This just about covers the objects section have a go at the project of this section next.','',1),('objects',3,2,'Objects','Project: Zoo Keeper','like normal variables you can store objects in a list as well, and you can add them to a list the same way you would add a normal variable to a list. You are tasked to create a program to manage animals at a zoo, you are to create an animal object that has a animal type and name variables. The program will take input from the use as to whether you want to add to the animals, remove from the animals or print out all the animals in the list, until the user types the symbol ‘#’ after which the program will terminate. A few things you should know before you start this is how to get input from a user and how to compare strings....\r\n\r\nTo get input from the user you use \r\n\r\n//CODE//\r\n<variable> = raw_input(<message>)\r\n//CODE//\r\n\r\nthis will display the <message> and then the use will be able to enter\r\n\r\nI hope what you have learnt can help you will your future programming and if you ever need a reference this could be a useful site to use.','',1),('sockets',3,1,'Sockets','Introduction To Sockets','Sockets allow internet traffic to be sent to the correct place or sent to a correct program that is running on a computer, for example if you have a computer running a web server to connect to it you connect to that computer on port 80. When you type a IP address into a browser what you are doing is sending to and receiving from that computer on port 80.\r\n\r\nTo open a port in python you must first import the socket library this will give your program the functionality you need. This is as simple as putting import socket at the top of your program. the next step is creating a new socket object, remember when we talked about objects and what they are, pretty much a socket object contains everything that is needed to open a connection a connection and send or receive from it. Creating a new instance of a socket object is as easy as\r\n\r\n//CODE//\r\nimport socket\r\n\r\ns = socket.socket()\r\n//CODE//\r\n\r\nfrom here there are two different different setups depending on whether you are creating the server or the client. The server is the one that is binded to the port and the client is the one that connects to the port, to connect to a server you would use \r\n\r\n//CODE//\r\ns.connect((host, port))\r\n//CODE//\r\n\r\nand if you want to set up a port for people to connect then you would use\r\n\r\n//CODE//\r\ns.bind((host, port))\r\n//CODE//\r\n\r\nThere as simple as that obviously to make your program do anything interesting you would need more but these are the basics.\r\n\r\nNow that you understand a bit more about what it is exactly you will be learning continue on to the next part of this section where you will actually learn how to do these sorts of things.\r\n','',1),('Sockets',3,2,'Sockets','Copy A File Using Sockets','In this tutorial you are going to create two programs, one that receives data and writes it to a file and another that sends the data. While these programs will use sockets to communicate they won\'t be communicating across the network as such, but it will act like it is, you will use ‘localhost’ as the ip which means it will be sending the data to the computer its being run, think of it just as a loop. \r\n\r\ncopy these two pieces of code down into the interpreter and save them. Remember that they are separate programs, and then we will go over the code so you understand what is going on\r\n\r\nclient.py\r\n\r\n//CODE//\r\nimport socket\r\n\r\ns = socket.socket()\r\ns.connect((\"localhost\", 9996))\r\n\r\nf = open(\'tosend.txt\', \'rb\')\r\nl = f.read(1024)\r\n\r\nwhile l:\r\n        s.send(l)\r\n        l = f.read(1024)\r\n\r\nf.close()\r\ns.close()\r\n//CODE//\r\n\r\nThe first and second lines are fairly simple and they were discussed before, as for the third line as i discussed in the previous section this is where you set the host and the port to connect to, the ports you can select can be anyway between 1 and 65510 but no two programs can use the same port and the first 100 - 120 are reserved for the system so choose your port carefully. the line f = open(‘tosend.txt’, ‘rb’) just opens the text file to open in the mode rb which is read binary. Its necessary to read the file as a binary file ( which doesn\'t have to be textfile by the way ) because when you send the data over the network it needs to be in binary. the line below that which we haven\'t covered before. The while loop just keep going until there is nothing left to read. Inside the loop is the l = f.read(1024) this just means assign the variable the first 1024 bytes from the file. the line s.send(l) does exactly what you would think, it sends the data contained in the variable l over the connection so the software on the other end can read it. then the data is read again and the loop continues. At the end of the program the file and the socket are closed, it\'s important to close the file to make sure everything gets written properly and its important to close the socket \r\n\r\n//<NEWSLIDE>// \r\nThis next part we will cover the server part of this program, this is the part the received data and writes it to file, the code is below...\r\n\r\nserver.py\r\n\r\n//CODE//\r\nimport socket\r\n\r\ns = socket.socket()\r\ns.bind((\"localhost\", 9996))\r\ns.listen(1)\r\nreceived = True\r\n\r\nwhile received:\r\n        sc, address = s.accept()\r\n        f = open(\'received.txt\', \'wb\')\r\n        l = sc.recv(1024)\r\n        while l:\r\n	    received = False\r\n                f.write(l)\r\n                l = sc.recv(1024)\r\n        f.close()\r\n\r\ns.close()\r\n//CODE//\r\n\r\nmost of this code is very similar to what we covered in the last section though there are some things that are unique to the server. instead of the s.connect() statement here we have a s.bind((“localhost, 9996)), instead of connecting to something on that port the bind statement tells the OS that all incoming connections will go to the to program. Below that you will see an s.listen(1) this means that the program can have at most 1 conception at a time, you can change this to whatever you want though. the received = True is just creating a variable that will monitor whether a file has been received, this will allow the program to terminate once a file has been send. the while loop will run until a file has been copied has been received by it of course you could make it run for ever and receive and write as many files as you want, the first line inside the loop sc, address = s.accept(). Now, we haven\'t covered assignment like this before but a function can return more than one value and this just means the variable sc gets the first and address gets the second. sc is the session between the client and the server and address is the ip address of whomever is connecting, we only care about the session as this is what allows us to send and receive data. as you can see next we open a file called received.txt ( note that you don\'t have to be sending a text file it could be a JPG just remember to change the file extension ) the next line l = sc.recv(1024) this is just saying assign the next 1024 bits received to the variable l, if nothing is sent it will just be nothing. Then there is a loop similar to the one in the client all this does is change the variable received to False so that the program will terminate once all the data has been received, then it just writes the data to file and gets the next lot.\r\nIf you want a bit of extra practice or just a bit more to do have a go at making the server just continue receiving files until it is stopped. Otherwise try your hand at the project\r\n\r\nHINT: to convert an int to a string use the function \r\n\r\n//CODE//\r\nstr(<int variable>)\r\n//CODE//','',1),('sockets',4,3,'Sockets','Project: Create A Chat Client','For this project i thought something interesting and fun for you to design and program would be a chatting program, create a server that receives text messages from a client be that over the network or just on your local computer. if you want an extension make it so two or more clients can actually send messages to each other through the server. Note that the messages should be group messages not just to one person.\r\n','',1),('gui',3,1,'GUI','Hello World GUI','For these tutorials i will be focusing on the how to create GUI\'s and not how to create good looking GUI\'s that is a completely different topic and its more of an art than a skill. For our first tutorial we will just create a window that displays the text \"Hello World\". In python we use a library called tkinter to create our GUI\'s there are other ones available but tkinter comes with python and is very easy to use.\r\n\r\nCreating a GUI in python is very simple, to start you have to import the necessary things for your GUI, in this case all we want is a label. a label is just a container for text, since this is the only thing we want we don\'t want to import the entire tkinter library we only want the label part so to do this you use from Tkinter import Label this only imports the label object from the tkinter library so we don\'t have lots of other stuff slowing down our program. Next we create a widget, you should note that since we only have one element to the GUI makes it a bit less complicated, we create it using the following widget = Label( text=\"Hello World\" ) , all this does is create a label and give it the text Hello World, so now that we have all we need the only things left to do are widget.pack(), which arranges it, in this case that doesn\'t really do anything but in the more complicated examples you add everything to container and then organize that but more on that later. The last and final step is widget.mainloop() which just creates the GUI and runs everything. The complete code is below type it into the interpreter on your computer and run it, its not the most interesting of programs but we will build on it.\r\n\r\nHelloWorldGUI.py\r\n\r\n//CODE//\r\nfrom Tkinter import Label\r\nwidget = Label(text=\"Hello World\")\r\nwidget.pack()\r\nwidget.mainloop()\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\nCongratulations, you have completed your first GUI tutorial continue on to learn how to use other elements with your GUI\'s.','',1),('gui',3,2,'GUI','Using Buttons','Buttons are probably one of the most useful thing when it comes to GUI\'s, for this program will will go about creating the GUI in a slightly different way but it will have the same result the only difference will be how flexible the program is. For this program we are going to make a click counter, there will be a button and for every time its clicker a count will be increased and displayed on the screen. \r\n\r\nWhen a button is clicked it is possible to have a function that is run, its a lot simpler to do this in Python as opposed to Java, with python you can just refer to a function that is to be run when the button is clicked, with Java you have to create button listeners, you need to remember however that all this is done in the background it just saves you the time of having to do it yourself.\r\n\r\n//<NEWSLIDE>//\r\n\r\nIn this case we are going to import everything rather than just one part of the library so we will use from Tkinter import * , next we just want to create the count variable that will hold the number of times the button has been pressed. next we created a function called click that is run whenever the button is pressed, this function consists of three parts. The first part of the function just tells it to look globally for the count variable, the line after that just increases the count variable by one and the last line to this function change the text contained in a label, you should note that the label.configure() can change numerous parameters but in this case we are changing only the text. below this is the part that just sets up the GUI and starts it running, first we create a window called root by using the following, root = Tk(). next i created the elements to place on the window i started with the label and i created it the following way l = Label(root, text=(\"Count: \" + str(count)) ) as you can see i use two arguments in this assignment, the first variable is root, this is telling the element what its parent is and where the element will go. The button is created in the exact same way just with one extra parameter the command parameter which is the function that gets run when the button is clicked. and the rest of the program is stuff we have already covered. The full code is below, copy it into an interpreter and run it.\r\n\r\nbuttonGUI.py\r\n\r\n//CODE//\r\nfrom Tkinter import *\r\ncount = 0\r\n\r\ndef click():\r\n    global count\r\n    count += 1\r\n    l.configure(text = (\"Count: \" + str(count)))\r\n\r\nroot = Tk()\r\nl = Label(root, text = (\"Count: \" + str(count)) )\r\nb = Button(root, text=\"Click\", command=click)\r\n\r\nb.pack(side=LEFT)\r\nl.pack(side=RIGHT)\r\n\r\nroot.mainloop()\r\n//CODE//\r\n\r\n//<NEWSLIDE>//\r\nNow that you have finished learning about Buttons its time to move onto Text Boxes.','',1),('gui',3,3,'GUI','Using Text Boxes','Here we are going to learn how to use text boxes with our designs to get get input from the user. Text boxes are a relatively simple addition to make, to create one you use textbox = Entry(root), this just creates a text box which is called a Entry widget. To get the text that has been typed into the a text box is relatively simple. an entry widget has a .get() (textbox.get()) function which returns the text as a string. So to get the text from it you can use a button that is linked to a function that retrieves it. Then like any other type of widget you must pack it by using the textbox.pack() function\r\n\r\nTry creating a program that when you click a button it will print the text in a text field, it should print it just how you would normally print something, nothing fancy. If you can\'t do complete it then look at the next slide, there is an example there.\r\n\r\n//<NEWSLIDE>//\r\nSo if you couldn\'t complete the task, that\'s fine just make sure you understand the example below before you continue on, if you could complete it thats great continue on now.\r\n\r\nGUITextButton.py\r\n\r\n//CODE//\r\nfrom Tkinter import *\r\nroot = Tk()\r\nt = \"\"\r\n\r\ndef onEnter():\r\n    print(e.get())\r\n\r\ne = Entry(root)\r\nb = Button(root, text=\"Enter\", command = onEnter )\r\n\r\nb.pack()\r\ne.pack()\r\nroot.mainloop()\r\n//CODE//','',1),('gui',3,4,'GUI','Using Checkboxes','Like most other widgets adding in a check box is very simple, to create a new one you can do the following checkbutton = Checkbutton(root, text=\"Check Box\"), so like before the first parameter, the root, is the parent window, this doesn\'t have to be root i just use this name, the text parameter is what is displayed beside it. The problem i find with these is the fact that it\'s slightly annoying to check what state they are in e.g. whether it is on or off. To do this requires you to create an extra variable ( you must do this for each one you wish you get the value from they all must have separate variables ) of type IntVar(), which is one we haven\'t covered before, this is because it is a special tkinter one, then inside the brackets as one of the parameters of the creation statement for a Checkbutton you add variable = var, then when you use the command variable.get() it will return 0 if it is toggled off and 1 if it is toggled on. and of course, once again, at the end you have to use checkbox.pack(). On thing you can do with this is like we did with the button you can add a command parameter so that when you check it a function gets run e.g. command = function, no brackets after the function name.\r\n\r\nNow, create a program to simulate a lock, there will be 4 check boxes and when you tick the correct ones and click a button it will change a label up the top to \"UNLOCKED\" otherwise it will be set to \"LOCKED\", it should also start default as \"LOCKED\". Like the last tutorial, give this ago and if you can\'t do it just move to the next slide, there is a solution there.\r\n\r\n//<NEWSLIDE>// \r\nIf you couldn\'t complete it check the code below and make sure you understand what is going on because that is important, if you could complete it and you do understand what is going on then continue on to the next tutorial\r\n\r\nGUICheckBox.py\r\n\r\n//CODE//\r\nfrom Tkinter import *\r\nroot = Tk()\r\n\r\ndef check():\r\n    if val1.get() == 1 and val3.get() == 1 and val2.get() == 0 and val4.get() == 0:\r\n        l.configure(text=\"UNLOCKED\")\r\n    else:\r\n        l.configure(text=\"LOCKED\")\r\n\r\nval1 = IntVar()\r\nval2 = IntVar()\r\nval3 = IntVar()\r\nval4 = IntVar()\r\n\r\nl = Label(root, text=\"LOCKED\")\r\n\r\nc1 = Checkbutton(root, text=\"1\", variable = val1)\r\nc2 = Checkbutton(root, text=\"2\", variable = val2)\r\nc3 = Checkbutton(root, text=\"3\", variable = val3)\r\nc4 = Checkbutton(root, text=\"4\", variable = val4)\r\n\r\nb = Button(root, text=\"Unlock!\", command=check)\r\n\r\nl.pack()\r\nc1.pack()\r\nc2.pack()\r\nc3.pack()\r\nc4.pack()\r\nb.pack()\r\nroot.mainloop()\r\n//CODE//','',1),('gui',3,5,'GUI','Using Radio Button','Radio Buttons are like check boxes just that only one can be selected at a time. The creation of these is very similar to any other type of widget we have looked at, to start you create one using the following, radiobutton = Radiobutton(root, text=\"radio\", value = \"selected\"), just like with the check box the root parameter is the window parent window the element gets put in and the text is something you want displayed beside it, the value however gets assigned to a variable if you specify this in the parameters. To do anything with these you will want to be able to store the value of the selected so you do this a similar way that we did it with the check box you create a variable, though unlike with the check boxes you only need one variable for a set of radio buttons as opposed to a variable for each of the check boxes. Anyway, though this time you will have to pick your data type carefully, if your values are strings then it will need to be a StringVar() but if there ints, then like the last tutorial it will be a IntVar(). once you have picked this and created this variable, in this case i will call it v, then you put it into the creation of the radio buttons, at the end add in variable = v. Now this in itself won\'t do anything you can see, sure it will change the variable v but you won\'t see any change. And of of course remember to use the pack function at the end of your program ( radiobutton.pack() ).\r\n\r\nNow to get something to happen you add a command parameter into the radio buttons like with the buttons so that when one is selected a function is executed then from here you could print out the value that the radio button has your you could do something fancy.\r\n\r\nTo help you remember this just create something simple, create a simple window with four radio buttons you can set their value to whatever you want be that a string or a int, then make it so when you select a new option from the radio buttons it will change a label that is up the top. If you can\'t do this then there is code in the next slide for you to look at.\r\n\r\n//<NEWSLIDE>//\r\n\r\nThere is some code below which is a solution to the problem in the previous section, if you completed the problem yourself then congratulations otherwise have a look at it and make sure you understand it before continuing.\r\n\r\nGUIRadioButton.py\r\n\r\n//CODE//\r\nfrom Tkinter import *\r\nroot = Tk()\r\n\r\ndef select():\r\n    l.configure(text=str(v.get()))\r\n\r\nl = Label(root, text=\"Nothing Selected\")\r\n\r\nv = IntVar()\r\n\r\nr1 = Radiobutton(root, text=\"1\", value=1, variable=v, command = select)\r\nr2 = Radiobutton(root, text=\"2\", value=2, variable=v, command = select)\r\nr3 = Radiobutton(root, text=\"3\", value=3, variable=v, command = select)\r\nr4 = Radiobutton(root, text=\"4\", value=4, variable=v, command = select)\r\n\r\n\r\nl.pack()\r\nr1.pack()\r\nr2.pack()\r\nr3.pack()\r\nr4.pack()\r\n\r\nroot.mainloop()\r\n//CODE//','',1),('gui',3,6,'GUI','Using Drop Down Lists','A drop down list is a more compact way of having multiple choices, in some cases radio buttons are better but in others a drop down list is best, it just depends. Creating a drop down list has an extra parameter that we haven\'t looked at but is shouldn\'t be hard to grasp, the statement for creating one is droplist = OptionMenu(root, var, <all the different options>), so again like every other widget we start with the parent window, which i call root but really it could be anything you name it, next is the variable that the currently selected is assigned to, and then you have all the different options. you put these in the order you want them to be displayed in so for example you might want the numbers 1, 2 and 3 so your statement would look like droplist = OptionMenu(root, var, 1, 2, 3), as simple as that, you should note that the data type the the variable which i called var in this one depends on the type of values you want in the list for example if you want ints then you make it a IntVar() other wise if  you want a string you make it a StringVar(). when you create these values they either start with the value 0 or and empty string you can change this via the var.set(data) method so that the initial selection of the drop down list it corresponds to is different. and like everything else we have covered you have to pack it at the end using droplist.pack().\r\n\r\nDo you remember the check box lock we made a couple of tutorials ago, well i want you to create that again just this time use drop down lists, have for drop down lists that each have the options 1, 2 or 3 and then if they all get set to the correct values a label up the top will read \"UNLOCKED\" otherwise if one or more are wrong it will read \"LOCKED\", you should note that with this one you don\'t need a button you can add a command parameter to the end of the drop down list creation that means whenever it is changed the function is run. There is code in the next slide if you can\'t complete this.\r\n\r\n//<NEWSLIDE>//\r\n\r\nThe code below is my solution to the problem in the previous section, if you completed it then congratulations otherwise have a look and see how to do it, its important you understand.\r\n\r\nGUIDropDownList.py\r\n\r\n//CODE//\r\nfrom Tkinter import *\r\nroot = Tk()\r\n\r\n\r\ndef check(event):\r\n    if var1.get() == 1 and var2.get() == 3 and var3.get() == 2 and var4.get() == 2:\r\n        l.configure(text=\"UNLOCKED\")\r\n    else:\r\n        l.configure(text=\"LOCKED\")\r\n\r\nvar1 = IntVar()\r\nvar2 = IntVar()\r\nvar3 = IntVar()\r\nvar4 = IntVar()\r\n\r\nl = Label(text = \"LOCKED\")\r\n\r\no1 = OptionMenu(root, var1, 1,2,3, command=check)\r\no2 = OptionMenu(root, var2, 1,2,3, command=check)\r\no3 = OptionMenu(root, var3, 1,2,3, command=check)\r\no4 = OptionMenu(root, var4, 1,2,3, command=check)\r\n\r\nl.pack()\r\no1.pack()\r\no2.pack()\r\no3.pack()\r\no4.pack()\r\n\r\nroot.mainloop() \r\n//CODE//','',1),('gui',3,7,'GUI','Project: Create a GUI For A Chat Client OR A Unit Converter','For this project i won\'t give you a long description because i want you to design everything yourself but here is what i want you to do. I want you to either create a GUI for the chat client for the project from the sockets section but if you haven\'t done this or you want something else i want you to create a unit converter for at least 4 different units.','',1);
/*!40000 ALTER TABLE `tutorials` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2014-04-03  4:31:53
